apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: qnap-nfs-csi
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: nfs.csi.k8s.io
parameters:
  server: 10.0.0.22
  share: /test/k8s
reclaimPolicy: Delete
volumeBindingMode: Immediate
allowVolumeExpansion: true
mountOptions:
  - nfsvers=4
  - nolock
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: media-nfs
provisioner: nfs.csi.k8s.io
parameters:
  server: 10.0.0.22
  share: /Media
reclaimPolicy: Delete
volumeBindingMode: Immediate
allowVolumeExpansion: true
mountOptions:
  - nfsvers=4
  - nolock
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qnap-media
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: media-nfs
  resources:
    requests:
      storage: 4000Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: nfs.csi.k8s.io
  name: pv-nfs
spec:
  capacity:
    storage: 4000Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: qnap-nfs-csi
  mountOptions:
    - nfsvers=4
    - nolock
  csi:
    driver: nfs.csi.k8s.io
    # volumeHandle format: {nfs-server-address}#{sub-dir-name}#{share-name}
    # make sure this value is unique for every share in the cluster
    volumeHandle: 10.0.0.22#k8s
    volumeAttributes:
      server: 10.0.0.22
      share: /test/k8s